import pygame
import random
import sys
import time

# Initializing PyGame and setting the game window size
pygame.init()
width = 750
height = 600
screen = pygame.display.set_mode((width, height))

# Setting up our colors
black = (0, 0, 0)
white = (255, 255, 255)
red = (255, 0, 0)

# Setting the number of cells in the game
cell_width = 15
cell_height = 15
margin = 2

# Calculating the number of columns and rows
cols = int(width / (cell_width + margin))
rows = int(height / (cell_height + margin))

# Creating a list to store our snake coordinates
snake_list = []

# Setting up our initial direction so we can update it with user input
direction = "right"

# Setting up the apples randomly at the start of the game
apple_x = round(random.randrange(0, cols - 1) * (cell_width + margin))
apple_y = round(random.randrange(0, rows - 1) * (cell_height + margin))

# Initializing the game loop
done = False
clock = pygame.time.Clock()

# Create our score variable
score = 0

# Start by adding 3 segments to our snake list
for i in range(3):
    x = 100 - (i * 15)
    y = 100
    snake_list.append([x, y])

# Main game loop
while not done:

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True

        # Get the key pressed by the user
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT and direction != "right":
                direction = "left"
            elif event.key == pygame.K_RIGHT and direction != "left":
                direction = "right"
            elif event.key == pygame.K_UP and direction != "down":
                direction = "up"
            elif event.key == pygame.K_DOWN and direction != "up":
                direction = "down"

    # Calculate the new head position
    if direction == "right":
        snake_head = [snake_list[0][0] + cell_width + margin, snake_list[0][1]]
    elif direction == "left":
        snake_head = [snake_list[0][0] - cell_width - margin, snake_list[0][1]]
    elif direction == "up":
        snake_head = [snake_list[0][0], snake_list[0][1] - cell_height - margin]
    elif direction == "down":
        snake_head = [snake_list[0][0], snake_list[0][1] + cell_height + margin]

    # Add the new head position to the beginning of the list
    snake_list.insert(0, snake_head)

    # Check if the new head position has collided with an apple
    if snake_head == [apple_x, apple_y]:
        # If a collision occurs, generate a new random position for the apple
        apple_x = round(random.randrange(0, cols - 1) * (cell_width + margin))
        apple_y = round(random.randrange(0, rows - 1) * (cell_height + margin))
        score += 10
    else:
        # If no collision has occurred, remove the last segment from the list
        snake_list.pop()

    # Render the background with white color
    screen.fill(white)

    # Render the apple
    pygame.draw.rect(screen, red, [apple_x, apple_y, cell_width, cell_height])

    # Render the snake using a for loop
    for x, y in snake_list:
        pygame.draw.rect(screen, black, [x, y, cell_width, cell_height])

    # Update the text on the screen with the score
    font = pygame.font.SysFont('Arial', 20)
    score_text = font.render("Score: " + str(score), True, black)
    screen.blit(score_text, [5, 5])

    # Check if the snake has left the screen
    if snake_head[0] >= width or snake_head[1] >= height or snake_head[0] < 0 or snake_head[1] < 0:
        game_over()
    # Check if the snake has collided with itself
    for body_part in snake_list[1:]:
        if body_part == snake_head:
            game_over()

    # Flip the display, so the updates show up on the screen
    pygame.display.flip()

    clock.tick(25)
